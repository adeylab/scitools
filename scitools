#!/usr/bin/perl

# INITIALIZE LOCATION
BEGIN {
	use FindBin '$RealBin';
	push @INC, $RealBin;
}

# VERSION INFO
$version = "0.1.2";
%version_info = (
	"0.1.0" => "180215, alpha - initial development",
	"0.1.1d" => "180418, alpha - dev split",
	"0.1.2" => "180608, modulization"
);

# LOAD MODULES
use Cwd;
use Getopt::Std; %opt = ();
use sci_utils::general;
use Exporter "import";

# LOAD DEFAULTS
$SCITOOLS_DEFAULTS = "$RealBin/scitools.cfg";
if (-e "$ENV{'HOME'}/.scitools.cfg") {
	$SCITOOLS_DEFAULTS = "$ENV{'HOME'}/.scitools.cfg";
} elsif (-e "$ENV{'HOME'}/scitools.cfg") {
	$SCITOOLS_DEFAULTS = "$ENV{'HOME'}/scitools.cfg";
} elsif ($ARGV[0] =~ /\.cfg$/) {
	# special config specification as first argument - advanced use only
	$SCITOOLS_DEFAULTS = shift(@ARGV);
	print STDERR "INFO: Special config file detected as first argument. ($ARGV[0])\n";
}
load_defaults($SCITOOLS_DEFAULTS,$RealBin);
load_gradient_defaults();

# LOAD COMMANDS DIRECTLY FROM MODULE FILES
opendir CMDS, "$RealBin/sci_commands" || die "ERROR: Cannot locate the commands directory.\nERROR: It should be present in the same directory as the scitools executable: $RealBin\n";
while ($command_module_name = readdir(CMDS)) {
	if ($command_module_name !~ /(^\.|empty_module|test)/) {
		if ($command_module_name =~ /\.pm$/) { # exceptions -> do not show as available commands
			$command_module_name =~ s/\.pm$//;
			$COMMAND_NAMES{$command_module_name} = "pm";
		} elsif ($command_module_name =~ /\.py$/) { # python commands
			$command_module_name =~ s/\.py$//;
			$COMMAND_NAMES{$command_module_name} = "py";
		} elsif ($command_module_name =~ /\.r$/i) { # R commands
			$command_module_name =~ s/\.(r|R)$//;
			$COMMAND_NAMES{$command_module_name} = "r";
		}
	}
} closedir CMDS;

# LOAD ALIASES (optional for each command)
load_aliases();

# DIE MESSAGE
$die = "
scitools [command] [options] [arguments]

Version: $version ($version_info{$version})
    adeylab.org & github.com/adeylab

scitools is a set of commands for general processing of single-
cell combinatorial indexing data. It is predominantly a wrapper
for generating R or other scripts that will be stored and executed.

scitools commands are typically in the form of [class]-[operation].

run 'scitools list' to print out a list of commands and descriptions.
To list a subset of commands include an additional argument with the
search term, e.g. 'scitools list fastq'\n\n";

# PULL COMMAND
if (defined $ARGV[0]) {
	if ($ARGV[0] =~ /^list$/) {
		load_descriptions();
		$die .= "   Command:             Description:\n\n";
		foreach $command_module_name (sort {$a cmp $b} keys %COMMAND_NAMES) {
			if (!defined $ARGV[1] || $command_module_name =~ /$ARGV[1]/i) {
				$list_command = sprintf("%-20s", $command_module_name);
				$list_command =~ s/_/-/g;
				if (defined $COMMAND_DESCRIPTOR{$command_module_name}) {
					$die .= "   $list_command $COMMAND_DESCRIPTOR{$command_module_name}\n";
				} else {
					$die .= "   $list_command WARNING: No description listed.\n";
				}
			}
		}
		die "$die\n";
	} else {
		$called_command = (shift(@ARGV));
		$called_command =~ s/-/_/g;
		
		if (defined $COMMAND_ALIAS{$called_command}) {
			$command = $COMMAND_ALIAS{$called_command};
		} elsif (defined $COMMAND_ALIAS{lc($called_command)}) {
			$command = $COMMAND_ALIAS{lc($called_command)};
		} else {$command = $called_command};
		if (!defined $COMMAND_NAMES{$command} && defined $COMMAND_NAMES{lc($command)}) {
			$command = lc($command);
		}
		if (defined $COMMAND_NAMES{$command}) {
		
			# CHECK FOR LOGGING IF EXECUTION IS REAL
			if ($log_check =~ /T/ && ($#ARGV+1)>0) {
				$cwd = getcwd(); $user = $ENV{USER};
				foreach $project_dir (keys %LOG_DIR) {
					$project_dir =~ s/\/$//;
					$projectID = $LOG_DIR{$project_dir};
					if ($cwd =~ /$project_dir/) {
						($head,$tail) = split(/$project_dir/, $cwd);
						$head =~ s/\/$//; $project_dir =~ s/^\///;
						$log_file = "$head/$project_dir/$projectID.scitools.log";
						$log_ts = localtime(time);
						$log_args = join(" ",@ARGV);
						open PLOG, ">>$log_file";
						print PLOG "$log_ts\tuser: $user\twd: $cwd\tcommand: scitools $command $log_args\n";
						close PLOG;
					}
				}
			}
		
			if (defined $IS_DEV{$command}) {
				print STDERR "\nWARNING: Command $command is considered to be in development.\n";
			}
			if ($COMMAND_NAMES{$command} =~ /pm/) {
				require "sci_commands/$command.pm";
				import "sci_commands::$command", "$command";
				\&$command(@ARGV);
			} elsif ($COMMAND_NAMES{$command} =~ /py/) {
				$args = join(" ", @ARGV);
				system("$Pscript $RealBin/sci_commands/$command.py $args");
			} elsif ($COMMAND_NAMES{$command} =~ /r/) {
				$args = join(" ", @ARGV);
				system("$Rscript $RealBin/sci_commands/$command.r $args");
			}
		} else {
			$command =~ s/_/-/g;
			die "ERROR: There is no command '$command', verify the command call name.\n$die";
		}
	}
} else {
	die $die;
}

# SUBROUTINES
sub load_aliases {
	
	# Alias structure:
	# The list of aliases MUST be all lower case and only use underscores (not dashes)
	# The command name that the alias refers to MUST be the EXACT command name,
	# meaning the name of the package / perl module / python script / etc...

	# FOR PULIC RELEASE
	
	# General Commands
	foreach $alias ("dependencies", "depend", "check_dependencies", "dependencies_check") {$COMMAND_ALIAS{$alias} = "dependencies"};
	foreach $alias ("defaults", "check_defaults", "defaults_check") {$COMMAND_ALIAS{$alias} = "defaults"};
	foreach $alias ("gradients_print", "gradients", "print_gradients", "list_gradients",
					"gradients_list", "gradient", "gradient_print", "print_gradient", "list_gradient", "gradient_list") {$COMMAND_ALIAS{$alias} = "gradients_print"};
	
	# Fastq Commands
	foreach $alias ("fastq_dump", "dump_fastq") {$COMMAND_ALIAS{$alias} = "fastq_dump"};
	foreach $alias ("fastq_split", "split_fastq") {$COMMAND_ALIAS{$alias} = "fastq_split"};
	foreach $alias ("fastq_merge", "merge_fastq") {$COMMAND_ALIAS{$alias} = "fastq_merge"};
	foreach $alias ("fastq_align", "align_fastq", "align") {$COMMAND_ALIAS{$alias} = "fastq_align"};
	foreach $alias ("fastq_barcode_collapse", "fastq_collapse", "barcode_collapse") {$COMMAND_ALIAS{$alias} = "fastq_barcode_collapse"};
	foreach $alias ("fastq_from_geo", "geo2fastq", "fastq_geo", "geo_fastq",
	                "fastq_from_sra", "sra2fastq", "fastq_sra", "sra_fastq") {$COMMAND_ALIAS{$alias} = "fastq_from_geo"};
	
	# Bam Commands
	foreach $alias ("bam_bulk2sci", "bulk2sci") {$COMMAND_ALIAS{$alias} = "bam_bulk2sci"};
	foreach $alias ("bam_addrg", "addrg") {$COMMAND_ALIAS{$alias} = "bam_addrg"};
	foreach $alias ("bam_rmdup", "rmdup") {$COMMAND_ALIAS{$alias} = "bam_rmdup"};
	foreach $alias ("bam_split", "split_bam") {$COMMAND_ALIAS{$alias} = "bam_split"};
	foreach $alias ("bam_filter", "filter_bam") {$COMMAND_ALIAS{$alias} = "bam_filter"};
	foreach $alias ("bam_merge", "merge_bam") {$COMMAND_ALIAS{$alias} = "bam_merge"};
	foreach $alias ("bam_project", "project_bam", "project") {$COMMAND_ALIAS{$alias} = "bam_project"};
	foreach $alias ("bam_aggregate", "aggregate_bam") {$COMMAND_ALIAS{$alias} = "bam_aggregate"};
	foreach $alias ("index_performance", "index_perform") {$COMMAND_ALIAS{$alias} = "index_performance"};
	foreach $alias ("bam2sra", "bam2geo") {$COMMAND_ALIAS{$alias} = "bam2sra"};
	foreach $alias ("complexity2log10", "log10complexity", "log10_unique") {$COMMAND_ALIAS{$alias} = "complexity2log10"};
	
	# Signal Commands
	foreach $alias ("signal_make", "make_signal") {$COMMAND_ALIAS{$alias} = "signal_make"};
	foreach $alias ("plot_signal", "signal_plot") {$COMMAND_ALIAS{$alias} = "plot_signal"};
	
	# Annotation Commands
	foreach $alias ("annot_make", "make_annot") {$COMMAND_ALIAS{$alias} = "annot_make"};
	foreach $alias ("annot_merge", "merge_annot") {$COMMAND_ALIAS{$alias} = "annot_merge"};
	foreach $alias ("annot_rename", "rename_annot") {$COMMAND_ALIAS{$alias} = "annot_rename"};
	foreach $alias ("rename_cells") {$COMMAND_ALIAS{$alias} = "rename_cells"};
	foreach $alias ("annot_collapse", "collapse_annot") {$COMMAND_ALIAS{$alias} = "annot_collapse"};
	foreach $alias ("annot_proportions", "proportions", "proportions_annot") {$COMMAND_ALIAS{$alias} = "annot_proportions"};
	
	# sci-ATAC-seq Commands
	foreach $alias ("atac_callpeaks", "atac_callpeak", "callpeak", "callpeaks") {$COMMAND_ALIAS{$alias} = "atac_callpeak"};
	foreach $alias ("atac_mergepeaks", "atac_mergepeak", "mergepeak", "mergepeaks",
					"merge_bed", "bed_merge", "mergebed", "bedmerge") {$COMMAND_ALIAS{$alias} = "atac_mergepeak"};
	foreach $alias ("atac_counts", "atac_count", "count", "counts") {$COMMAND_ALIAS{$alias} = "atac_count"};
	foreach $alias ("atac_enrich", "enrich_atac") {$COMMAND_ALIAS{$alias} = "atac_enrich"};
	
	# Matrix Commands
	foreach $alias ("matrix_filter", "filter_matrix") {$COMMAND_ALIAS{$alias} = "matrix_filter"};
	foreach $alias ("matrix_naomit", "naomit_matrix") {$COMMAND_ALIAS{$alias} = "matrix_naomit"};
	foreach $alias ("matrix_summarize", "summarize_matrix") {$COMMAND_ALIAS{$alias} = "matrix_summarize"};
	foreach $alias ("matrix_correlate", "correlate_matrix") {$COMMAND_ALIAS{$alias} = "matrix_correlate"};
	foreach $alias ("matrix_tf", "tf", "tf_matrix") {$COMMAND_ALIAS{$alias} = "matrix_tf"};
	foreach $alias ("matrix_tfidf", "tfidf", "tfidf_matrix") {$COMMAND_ALIAS{$alias} = "matrix_tfidf"};
	foreach $alias ("matrix_lsi", "lsi", "lsi_matix") {$COMMAND_ALIAS{$alias} = "matrix_lsi"};
	foreach $alias ("matrix_zscore", "zscore_matrix") {$COMMAND_ALIAS{$alias} = "matrix_zscore"};
	foreach $alias ("matrix_tsne", "tsne", "dims_tsne", "tsne_dims", "tsne_matrix") {$COMMAND_ALIAS{$alias} = "matrix_tsne"};
	foreach $alias ("matrix_pca", "pca") {$COMMAND_ALIAS{$alias} = "matrix_pca"};
	foreach $alias ("matrix_irlba", "irlba", "irlba_matrix") {$COMMAND_ALIAS{$alias} = "matrix_irlba"};
	foreach $alias ("matrix_aggregate", "aggregate_matrix") {$COMMAND_ALIAS{$alias} = "matrix_aggregate"};
	foreach $alias ("matrix_merge", "merge_matrix") {$COMMAND_ALIAS{$alias} = "matrix_merge"};
	foreach $alias ("matrix_pull", "pull_matrix") {$COMMAND_ALIAS{$alias} = "matrix_pull"};
	foreach $alias ("counts2tsne", "atac_tsne", "counts_tsne") {$COMMAND_ALIAS{$alias} = "counts2tsne"};
	foreach $alias ("matrix_da", "da_matrix", "atac_da", "da_atac", "diff_access") {$COMMAND_ALIAS{$alias} = "matrix_DA"};
	foreach $alias ("matrix_sparse", "make_sparse", "sparse") {$COMMAND_ALIAS{$alias} = "matrix_sparse"};
	foreach $alias ("matrix_unsparse", "make_unsparse", "unsparse") {$COMMAND_ALIAS{$alias} = "matrix_unsparse"};
	
	# Dimensions Commands
	foreach $alias ("dims_kmeans", "kmeans") {$COMMAND_ALIAS{$alias} = "dims_kmeans"};
	foreach $alias ("dims_dbscan", "dbscan") {$COMMAND_ALIAS{$alias} = "dims_dbscan"};
	foreach $alias ("dims_pcurve", "pcurve") {$COMMAND_ALIAS{$alias} = "dims_pcurve"};
	foreach $alias ("pcurve_center", "center_pcurve", "lambda_center", "center_lambda") {$COMMAND_ALIAS{$alias} = "pcurve_center"};
	foreach $alias ("prune_pcurve", "pcurve_prune") {$COMMAND_ALIAS{$alias} = "pcurve_prune"};
	foreach $alias ("aggregate_cells", "aggregate") {$COMMAND_ALIAS{$alias} = "aggregate_cells"};
	
	# Plotting Commands
	foreach $alias ("plot_complexity") {$COMMAND_ALIAS{$alias} = "plot_complexity"};
	foreach $alias ("plot_dims", "dims_plot") {$COMMAND_ALIAS{$alias} = "plot_dims"};
	foreach $alias ("plot_3ddims", "plot_dims_3d", "dims_plot3d", "dims_plot_3d") {$COMMAND_ALIAS{$alias} = "plot_3ddims"};
	foreach $alias ("plot_pcurve", "pcurve_plot") {$COMMAND_ALIAS{$alias} = "plot_pcurve"};
	foreach $alias ("plot_reads", "reads_plot") {$COMMAND_ALIAS{$alias} = "plot_reads"};
	foreach $alias ("plot_values", "values_plot") {$COMMAND_ALIAS{$alias} = "plot_values"};
	
	# Data Comamnds
	foreach $alias ("combine_data", "data_combine") {$COMMAND_ALIAS{$alias} = "data_combine"};
	foreach $alias ("split_data", "data_split") {$COMMAND_ALIAS{$alias} = "data_split"};
		
	# sci-MET / sci-NOMe
	foreach $alias ("met_nomeextract", "nomeextract", "met_nome_extract", "nome_extract", "extract_nome") {$COMMAND_ALIAS{$alias} = "met_NOMeextract"};
	foreach $alias ("met_metextract", "metextract", "met_extract", "extract_met") {$COMMAND_ALIAS{$alias} = "met_metextract"};
	foreach $alias ("met_metfilter", "metfilter", "met_filter", "filter_met") {$COMMAND_ALIAS{$alias} = "met_metfilter"};
	foreach $alias ("met_probesummary", "met_probe_summary") {$COMMAND_ALIAS{$alias} = "met_probesummary"};
	foreach $alias ("met_probeview", "met_probe_view") {$COMMAND_ALIAS{$alias} = "met_probeview"};
	
	# INTERNAL / DEVELOPMENT COMMANDS

	foreach $alias ("atac_chromvar", "chromvar") {$COMMAND_ALIAS{$alias} = "atac_chromvar"};
	foreach $alias ("matrix_approx_factors", "matrix_factors", "factors") {$COMMAND_ALIAS{$alias} = "matrix_factors"};
	foreach $alias ("matrix_swne", "swne", "piglet") {$COMMAND_ALIAS{$alias} = "matrix_swne"};
	foreach $alias ("umap", "owl", "matrix_umap", "dims_umap", "umap_dims") {$COMMAND_ALIAS{$alias} = "matrix_umap"};
	foreach $alias ("plot_factors") {$COMMAND_ALIAS{$alias} = "plot_factors"};
	foreach $alias ("atac_deviation", "deviation", "deviation_atac") {$COMMAND_ALIAS{$alias} = "atac_deviation"};
	foreach $alias ("matrix_makecds", "matrix_makeCDS","makeCDS_matrix","makecds_matrix") {$COMMAND_ALIAS{$alias} = "matrix_makecds"};
	foreach $alias ("cds_monocle","monocle_cds") {$COMMAND_ALIAS{$alias} = "cds_monocle"};
	foreach $alias ("matrix_makeCDS","matrix_make_cds","matrix2cds","matrix_makecds","makecds","make-cds","cds-make") {$COMMAND_ALIAS{$alias} = "matrix_make_cds"};
	foreach $alias ("matrix_cistopic","cistopic","cistopic_matrix","matrix-cistopic") {$COMMAND_ALIAS{$alias} = "matrix_cistopic"};
	foreach $alias ("da_enrichment","da-enrichment","enrichment-da","enrichment_da") {$COMMAND_ALIAS{$alias} = "da_enrichment"};
	foreach $alias ("atac_genehancer","atac-genehancer","genehancer","genehancer_atac","genehancer-atac") {$COMMAND_ALIAS{$alias} = "atac_genehancer"};
	foreach $alias ("atac_refcount","refcount","refcount_atac") {$COMMAND_ALIAS{$alias} = "atac_refcount"};

}

sub load_descriptions {
	
	# Command Decription Structure:
	# The call must be the EXACT match to the command file / package / etc...
	# Provide a brief description of its function
	
	# FOR PULIC RELEASE
	
	$COMMAND_DESCRIPTOR{"dependencies"} = "Check dependencies";
	$COMMAND_DESCRIPTOR{"defaults"} = "Print out the defaults that are detected / specified";
	$COMMAND_DESCRIPTOR{"gradients_print"} = "Print out the default gradients";
	$COMMAND_DESCRIPTOR{"fastq_dump"} = "Go from illumina fastqs to SCI fastq format";
	$COMMAND_DESCRIPTOR{"fastq_split"} = "Split SCI fastq files using annotation file";
	$COMMAND_DESCRIPTOR{"fastq_merge"} = "Merge fastq files that have the same barcodes";
	$COMMAND_DESCRIPTOR{"fastq_align"} = "Align fastq files and sort resulting bam file";
	$COMMAND_DESCRIPTOR{"fastq_from_geo"} = "Convert GEO or SRA fqs w/ barcodes to scitools fq";
	$COMMAND_DESCRIPTOR{"fastq_barcode_collapse"} = "Collapse barcodes in a fastq set -> sci format";
	$COMMAND_DESCRIPTOR{"bam_bulk2sci"} = "Merge multiple bulk bam files to one SCI bam";
	$COMMAND_DESCRIPTOR{"bam_addrg"} = "Add RG lines to bam";
	$COMMAND_DESCRIPTOR{"bam_rmdup"} = "Barcode-based duplicate removal";
	$COMMAND_DESCRIPTOR{"complexity2log10"} = "Complexity to log10 unique reads values file";
	$COMMAND_DESCRIPTOR{"bam_filter"} = "Filter bam based on a variety of options";
	$COMMAND_DESCRIPTOR{"bam_split"} = "Split bam by annotation file";
	$COMMAND_DESCRIPTOR{"bam_merge"} = "Merges one or more bam files";
	$COMMAND_DESCRIPTOR{"bam_project"} = "Use complexity to project additional sequence";
	$COMMAND_DESCRIPTOR{"bam_aggregate"} = "Aggregate cells in bam by annotation file";
	$COMMAND_DESCRIPTOR{"bam2sra"} = "Unfilterd bam files to SRA / GEO fastq files";
	$COMMAND_DESCRIPTOR{"annot_make"} = "Make annotation file";
	$COMMAND_DESCRIPTOR{"annot_merge"} = "Merge annotation files";
	$COMMAND_DESCRIPTOR{"annot_rename"} = "Rename annotations using a mapping file";
	$COMMAND_DESCRIPTOR{"annot_collapse"} = "Collapse annotations, or rename them";
	$COMMAND_DESCRIPTOR{"annot_proportions"} = "Proportions of cells by annot";
	$COMMAND_DESCRIPTOR{"rename_cells"} = "Rename cells";
	$COMMAND_DESCRIPTOR{"atac_callpeak"} = "Call peaks on bam file using macs2";
	$COMMAND_DESCRIPTOR{"atac_mergepeak"} = "Merge ATAC_seq peak files";
	$COMMAND_DESCRIPTOR{"atac_count"} = "Bam and peak file to a counts matrix";
	$COMMAND_DESCRIPTOR{"atac_enrich"} = "Test for the enrichment of one feature set in another";
	$COMMAND_DESCRIPTOR{"signal_make"} = "Generate windowed signal over features from bam";
	$COMMAND_DESCRIPTOR{"plot_signal"} = "Plot windowed signal views";
	$COMMAND_DESCRIPTOR{"matrix_summarize"} = "Generate a summary and plots on matrix properties";
	$COMMAND_DESCRIPTOR{"matrix_filter"} = "Filter a sci-ATAC-seq counts matrix";
	$COMMAND_DESCRIPTOR{"matrix_naomit"} = "Filter out rows with NA values";
	$COMMAND_DESCRIPTOR{"matrix_zscore"} = "Z-scores matrix by rows, columns, or globally";
	$COMMAND_DESCRIPTOR{"matrix_correlate"} = "Correlate columns/rows of a matrix";
	$COMMAND_DESCRIPTOR{"matrix_tf"} = "Normalize only by term frequency";
	$COMMAND_DESCRIPTOR{"matrix_tfidf"} = "Perform tf-idf on counts matrix";
	$COMMAND_DESCRIPTOR{"matrix_lsi"} = "Perform Latent Semantic Indexing on matrix";
	$COMMAND_DESCRIPTOR{"matrix_tsne"} = "tSNE on matrix or dims file";
	$COMMAND_DESCRIPTOR{"matrix_pca"} = "PCA on matrix";
	$COMMAND_DESCRIPTOR{"matrix_irlba"} = "IRLBA on matrix - good for big matrices";
	$COMMAND_DESCRIPTOR{"matrix_aggregate"} = "Aggregate cells in counts matrix by annotation";
	$COMMAND_DESCRIPTOR{"matrix_merge"} = "Merge matrices, no overlap in cell names assumed";
	$COMMAND_DESCRIPTOR{"matrix_pull"} = "Pull entries from a matrix and print them";
	$COMMAND_DESCRIPTOR{"matrix_DA"} = "Differential accessibility on counts matrix";
	$COMMAND_DESCRIPTOR{"counts2tsne"} = "Process a counts matrix to dims by: tfidf->irlba->tSNE";
	$COMMAND_DESCRIPTOR{"dims_kmeans"} = "Kmeans clustering on dims file";
	$COMMAND_DESCRIPTOR{"dims_dbscan"} = "Density-base (dbscan) clustering on dims file";
	$COMMAND_DESCRIPTOR{"dims_pcurve"} = "Project a principle curve through dims file";
	$COMMAND_DESCRIPTOR{"pcurve_center"} = "Centers and normalizes a pcurve lambda";
	$COMMAND_DESCRIPTOR{"pcurve_prune"} = "Prunes cells distant from the pcurve";
	$COMMAND_DESCRIPTOR{"aggregate_cells"} = "Aggregate cells in proximity with one another";
	
	$COMMAND_DESCRIPTOR{"plot_complexity"} = "Plot complexity data";
	$COMMAND_DESCRIPTOR{"plot_dims"} = "Plot tSNE or other dimensions file";
	$COMMAND_DESCRIPTOR{"plot_3ddims"} = "Plot a dimensions file in 3d, uses a monocle CDS.rds file";
	$COMMAND_DESCRIPTOR{"plot_pcurve"} = "Genrate multiple princurve plots";
	$COMMAND_DESCRIPTOR{"plot_reads"} = "Plot reads as points in genomic window";
	$COMMAND_DESCRIPTOR{"plot_values"} = "Plot values file";
	$COMMAND_DESCRIPTOR{"index_performance"} = "Index performance on fastq or bam";
	$COMMAND_DESCRIPTOR{"data_combine"} = "Combine matrixes, annotations, dims to a table";
	$COMMAND_DESCRIPTOR{"data_split"} = "Breaks a combined data file into component files";
	
	$COMMAND_DESCRIPTOR{"met_NOMeextract"} = "Extract NOMe seq methylation data";
	$COMMAND_DESCRIPTOR{"met_metextract"} = "Extract methylaiton data from sci-MET";
	$COMMAND_DESCRIPTOR{"met_metfilter"} = "Filter extracted methylaiton data";
	$COMMAND_DESCRIPTOR{"met_probesummary"} = "Summarize methylaiton over regions";
	$COMMAND_DESCRIPTOR{"met_probeview"} = "Visualize methylaiton over regions";
	
	# INTERNAL / DEVELOPMENT COMMANDS
	
	$COMMAND_DESCRIPTOR{"check_vars"} = "Debugging tool to test vars passed to a command";
	$COMMAND_DESCRIPTOR{"atac_chromvar"} = "Run chromVAR wrapper on sci-ATAC-seq data";
	$COMMAND_DESCRIPTOR{"matrix_factors"} = "Calculates reconstruction error for NMF and SWNE";
	$COMMAND_DESCRIPTOR{"matrix_nmf"} = "Non-negative Matrix Factorization of matrix";
	$COMMAND_DESCRIPTOR{"matrix_swne"} = "SWNE on matrix";
	$COMMAND_DESCRIPTOR{"matrix_umap"} = "UMAP on matrix";
	$COMMAND_DESCRIPTOR{"plot_factors"} = "Generates factor vs reconstruction error plot";
	$COMMAND_DESCRIPTOR{"atac_deviation"} = "Deviation and variability for a feature set";
	$COMMAND_DESCRIPTOR{"cds_monocle"} = "Monocle3 Call for branch analysis on sci-ATAC-seq data";
	$COMMAND_DESCRIPTOR{"cds_cicero"} = "Cicero Call for CCAN analysis on sci-ATAC-seq data";
	$COMMAND_DESCRIPTOR{"matrix_make_cds"} = "Convert scitools files into CDS format for Monocle3";
	$COMMAND_DESCRIPTOR{"dims_moran"} = "Spectral Statistics for ChromVar enrichment across clustered cells";
	$COMMAND_DESCRIPTOR{"matrix_bicluster"} = "Bicluster and plot a heatmap";
	$COMMAND_DESCRIPTOR{"matrix_cistopic"} = "cisTopic on matrix";
	$COMMAND_DESCRIPTOR{"da_enrichment"} = "Analyze Diff Accessible Peaks with HOMER and LOLA";
	$COMMAND_DESCRIPTOR{"atac_genehancer"} = "Overlap peaks bed file with Genehancer database";
	$COMMAND_DESCRIPTOR{"atac_refcount"} = "Generate Counts Matrix with bbrd bam and reference bed file";

}
